@using Pandacap.Data
@using Pandacap.LowLevel
@model BridgedPostViewModel
@inject IdMapper idMapper

@{
    ViewBag.Title = Model.Post.Title;
}

@if (!Model.Post.HasImage && DateTimeOffset.UtcNow.AddYears(-1) > Model.Post.PublishedTime)
{
    <div class="card text-bg-warning mb-3" style="max-width: 18rem;">
        <div class="card-body">
            <p class="card-text">This post is more than one year old.</p>
        </div>
    </div>
}

<h1>@Model.Post.Title</h1>

<p>
    @Model.Post.PublishedTime.UtcDateTime.ToLongDateString()
    @Model.Post.PublishedTime.UtcDateTime.ToShortTimeString()
</p>

@if (Model.Post.HasImage)
{
    <p>
        <img src="@idMapper.GetImageUrl(Model.Post.Id)"
             alt="@Model.Post.AltText"
             title="@Model.Post.AltText"
             style="width: 100%; max-width: 640px; max-height: 640px; object-fit: contain" />
    </p>
}

<p>
    @Html.Raw(Model.Post.Description)
</p>

@if (Model.Post.Tags.Any())
{
    <p>
        @foreach (string tag in Model.Post.Tags)
        {
            <a href="/Profile/Search?q=%23@(Uri.EscapeDataString(tag))">#@tag</a>
        }
    </p>
}

@if (Model.RemoteActivities.Any())
{
    foreach (var group in Model.RemoteActivities.GroupBy(a => a.ActivityType))
    {
        <details>
            <summary>
                @(group.Key)s: <strong>@group.Count()</strong>
            </summary>
            <ul>
                @foreach (var activity in group)
                {
                    <li>
                        <a href="@activity.ActorId" target="_blank">@activity.ActorId</a>
                        <span class="text-muted">(@activity.AddedAt)</span>
                    </li>
                }
            </ul>
        </details>
    }
}

@if (User.Identity?.IsAuthenticated == true)
{
    <form asp-action="Refresh">
        <input type="hidden" name="id" value="@Model.Post.Id" />
        <button type="submit" class="btn btn-primary">
            Refresh from DeviantArt
        </button>
    </form>
}
