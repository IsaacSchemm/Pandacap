@using Pandacap.Data
@using Pandacap.HighLevel
@using Pandacap.Models
@model ListViewModel

@{
    ViewBag.Title = Model.Title;
}

@if (Model.AllowDismiss)
{
    <form id="dismissForm" asp-controller="Inbox" asp-action="Dismiss" method="post"></form>
}

@if (!Model.Items.Current.Any())
{
    <p>
        Showing <strong>0</strong> items.
    </p>
}
else
{
    var minDate = Model.Items.Current.Select(item => item.Timestamp).Min().UtcDateTime;
    var maxDate = Model.Items.Current.Select(item => item.Timestamp).Max().UtcDateTime;

    <p>
        Showing
        <strong>@Model.Items.Current.Count()</strong>
        item(s) posted between
        <strong>@minDate.ToLongDateString()</strong> (@minDate.ToShortTimeString())
        and
        <strong>@maxDate.ToLongDateString()</strong> (@maxDate.ToShortTimeString()).
    </p>

    if (Model.CanBeSyndicationFeed)
    {
        <p>
            <a href="?format=rss">RSS feed</a>
            &middot;
            <a href="?format=atom">Atom feed</a>
        </p>
    }

    var groups = Model.GroupByUser
        ? Model.Items.Current.GroupBy(item => new { Username = (string?)item.Username, ProfileUrl = (string?)item.ProfileUrl })
        : Model.Items.Current.GroupBy(item => new { Username = (string?)null, ProfileUrl = (string?)null });

    foreach (var group in groups)
    {
        bool showThumbnails =
            Model.ShowThumbnails.IsAlways ? true
            : Model.ShowThumbnails.IsNever ? false
            : group.Any(item => item.ThumbnailUrls.Any());

        if (!string.IsNullOrEmpty(group.Key.Username))
        {
            <h1>
                @foreach (string icon in group.Select(p => p.Usericon).Take(1))
                {
                    <img height="50" src="@icon" alt="" />
                }
                <a href="@group.Key.ProfileUrl" target="_blank" style="display: inline-block; vertical-align: top">
                    <strong>
                        @group.Key.Username
                    </strong>
                </a>
            </h1>

            foreach (var badge in group.SelectMany(p => p.Badges).Distinct())
            {
                <span class="badge mb-3" style="background-color: @badge.Background; color: @badge.Color">
                    @badge.Text
                </span>
            }
        }

        <div class="container-fluid">
            <div class="row">
                @foreach (var item in group)
                {
                    if (item is Post post && post.Type == PostType.StatusUpdate)
                    {
                        <div class="col-12">
                            <partial name="_StatusUpdate" model="@post" />
                        </div>
                        continue;
                    }

                    string? thumbnailUrl = item.ThumbnailUrls.FirstOrDefault();
                    <div class="col-12 mb-3 @(showThumbnails ? "col-sm-4 col-md-3 text-center" : "")">
                        @if (showThumbnails)
                        {
                            <a href="@item.LinkUrl" aria-hidden="true">
                                <img src="@(thumbnailUrl ?? "/images/trgray.svg")"
                                        alt=""
                                        referrerpolicy="no-referrer"
                                        class="feed-image" />
                            </a>
                        }
                        <label class="@(showThumbnails ? "with-thumbnail" : "")">
                            @if (Model.AllowDismiss)
                            {
                                <input form="dismissForm" type="checkbox" name="id" class="inboxItemCheckbox" value="@item.Id" />
                            }
                            <a href="@item.LinkUrl">@item.DisplayTitle</a>
                            @if (item is Post)
                            {
                                <br />
                                <span class="text-muted">(@item.Timestamp.UtcDateTime.ToLongDateString())</span>
                            }
                        </label>
                        @if (item is RssFeedItem feedItem)
                        {
                            foreach (var enclosure in feedItem.Enclosures.Where(e => e.MediaType == "audio/mpeg"))
                            {
                                <div class="mt-3">
                                    <a class="btn btn-outline-primary btn-sm" href="@enclosure.Url">
                                        Download
                                    </a>
                                    @if (enclosure.MediaType == "audio/mpeg")
                                    {
                                        <a class="btn btn-outline-secondary btn-sm" asp-controller="Podcast" asp-action="SegmentZip" asp-route-url="@enclosure.Url" asp-route-seconds="300">
                                            Split (.wma)
                                        </a>
                                    }
                                </div>
                            }
                        }
                    </div>
                }
            </div>
        </div>
    }

    @if (Model.AllowDismiss)
    {
        <hr />

        <button type="button" id="selectAll" class="btn btn-secondary">
            Select / deselect all
        </button>

        <button form="dismissForm" type="submit" class="btn btn-secondary">
            Remove selected items from inbox
        </button>
    }

    @if (Microsoft.FSharp.Core.OptionModule.ToObj(Model.Items.Next) is IPost nextPost)
    {
        <hr />

        <a asp-route-q="@Model.Q"
           asp-route-next="@nextPost.Id"
           asp-route-count="@Model.Items.Current.Length"
           class="btn btn-primary">
            Next @Model.Items.Current.Length items &raquo;
        </a>
    }
}

<script type="text/javascript">
    document.getElementById("selectAll").addEventListener("click", e => {
        e.preventDefault();

        const checkboxes = document.getElementsByClassName("inboxItemCheckbox");
        let anyUnchecked = false;
        for (let i = 0; i < checkboxes.length; i++) {
            if (!checkboxes[i].checked) {
                anyUnchecked = true;
                break;
            }
        }
        for (let i = 0; i < checkboxes.length; i++) {
            checkboxes[i].checked = anyUnchecked ? true : false;
        }
    });
</script>

<style type="text/css">
    label.with-thumbnail {
        max-width: 100%;
        max-height: 3rem;
        overflow: hidden;
    }
</style>
